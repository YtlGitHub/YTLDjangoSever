环境：
	python：3.8.2
	django：3.2.7
	mysqlclient：2.0.3
	
查看pip已安装的插件：pip list

django安装：pip install django==3.2.*
	默认会安装：Django==3.2.7、sqlparse==0.4.1 和 pytz==2021.1
	检查当前是否安装Django及版本：python -m django --version

正式开始快速创建项目及app应用

一、创建项目：
cmd终端输入命令：django-admin startproject myweb
	进入你要做项目的目录输入命令
	会在当前目录创建myweb目录，目录里面也有一个同名的目录，你可以把他当成外面的目录当成项目容器，里面的目录当成项目，还有一下项目文件。
	文件介绍：
		manage.py：一个命令行实用程序，可以让你以各种方式与此Django项目进行交互
		init.py：一个空文件，告示你Python这个目录应该被任务是一个Python包
		settings.py：这个是Django项目的设置/配置，Django设置会告诉你所有关于设置的工作原理
		urls.py：这个是Django项目的URL声明，你的Django动态网站的"目录"
		wsgi.py：WSGI兼容的Web服务器为你的项目提供服务的入口点，做服务搭建的时候涉及
	在cd进入myweb项目目录输入命令启动服务
	启动服务：python manage.py runserver
		当然这个只是启动本地服务，
	启动远程服务：python manage.py runserver 本地ip地址:端口
		如：python manage.py runserver 192.168.43.136:8002
		这里会报：无效的 HTTP_HOST 标头：“192.168.43.136:8002”。您可能需要将“192.168.43.136”添加到 ALLOWED_HOSTS。
		所以要在settings.py 文件里面把地址添加进去或者直接添加*表示所有ip地址都可以访问
		如：ALLOWED_HOSTS = ["192.168.43.136"] 或 ALLOWED_HOSTS = ["*"]
		这样在同一网络下别人也可以访问你的服务了
	查看目录：dir
二、创建app：python manage.py startapp myapp
	cd到myweb执行命令
	会在当前目录下创建一个myapp目录即app即项目应用
	在views.py函数里面添加试图函数：
		如：
			from django.shortcuts import render
			from django.http import HttpResponse
			def index(request):
				return HttpResponse("Hello World!")
	在当前目录创建urls.py文件,并设置路由
		如：
			from django.urls import path
			from . import views


			urlpatterns = [
				path('', views.index, name='index'),
			]
	再在主路由myweb/urls.py文件配置一下路由：
		如：
			from django.contrib import admin
			from django.urls import path, include


			urlpatterns = [
				path('admin/', admin.site.urls),
				path('myapp/', include('myapp.urls'))
			]
	在运行服务查看就可以在网页显示Hello World
	也可以在myapp项目应用urls.py再创建一个函数来增加另外一个网页显示
		如：
			def app02(request):
				return HttpResponse("app02")
	再在项目路由myapp/urls.py设置网页路径
		如：
			urlpatterns = [
				path('', views.index, name='index'),
				path('app02', views.app02, name='app02'),
			]
		在下面多加一个path路径'app02'表示网页地址路径，views.app02表示展示调用项目应用里面的函数，name='app02'表示给该路径取个名字自己定义，可以用来反向获取URL
		
三、项目的模型
	1、连接数据库
		在settings.py文件里面配置一下我们需要连接的数据库
		如：
			DATABASES = {
				'default': {
					'ENGINE': 'django.db.backends.sqlite3',
					'NAME': BASE_DIR / 'db.sqlite3',
				}
			}
			把这个替换成
			DATABASES = {
				'default': {
					'ENGINE': 'django.db.backends.mysql',
					'NAME': 'mydemo',
					'USER': 'root',
					'PASSWORD' 'ytl',
					'HOST': 'localhost',
					'PORT': '3306',
				}
			}
	2、下载mysqlclient，执行mysql需要用到，一个加载模块
		把之前的pymysql改成mysqlclient
	3、在models.py文件里面创建数据类
		如：
			class Stu(models.Model):
				```自定义Stu表对应的Model类```
				# 定义属性：默认主键自增id字段可不写
				id = models.AutoField(primary_key=True)
				name = models.CharField(max_length=16)
				age = models.SmallIntegrField()
				sex = models.CharField(max_length=1)
				classid = models.CharField(max_length=8)
				
				# 定义默认输出格式
				def __str__(self):
					return "%d:%s:%d:%s:%s:"%(self.id,self.name,self.age,seek.sex,self.classid)
					
				# 自定义对应的表明，默认表名：myapp_stu    
				class Meta:
					db_table="stu"
		4、在settings.p配置文件里面把myapp应用添加进去
			如：
				INSTALLED_APPS = [
					'django.contrib.admin',
					'django.contrib.auth',
					'django.contrib.contenttypes',
					'django.contrib.sessions',
					'django.contrib.messages',
					'django.contrib.staticfiles',
					'myapps',
				]











